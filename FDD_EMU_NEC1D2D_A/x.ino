// =========================================================================================
// PC-6001,PC-8001,PC-8801,PC-9801系の外付け[1D][2D]ｲﾝﾃﾘｼﾞｪﾝﾄﾀｲﾌﾟのFDDｴﾐｭﾚｰﾀです。
// =========================================================================================
// 対応するFDｲﾒｰｼﾞ1 : d88[1D](35ﾄﾗｯｸ, 1ﾄﾗｯｸ16ｾｸﾀ, 1ｾｸﾀ256byte, ｲﾒｰｼﾞｻｲｽﾞ 153008 byte)
// 対応するFDｲﾒｰｼﾞ2 : d88[1D](40ﾄﾗｯｸ, 1ﾄﾗｯｸ16ｾｸﾀ, 1ｾｸﾀ256byte, ｲﾒｰｼﾞｻｲｽﾞ 174768 byte)
// 対応するFDｲﾒｰｼﾞ3 : d88[2D](80ﾄﾗｯｸ, 1ﾄﾗｯｸ16ｾｸﾀ, 1ｾｸﾀ256byte, ｲﾒｰｼﾞｻｲｽﾞ 348848 byte),
// 対応するFDｲﾒｰｼﾞ5 : ﾌﾟﾚｰﾝｲﾒｰｼﾞ[1D](35ﾄﾗｯｸ, 1ﾄﾗｯｸ16ｾｸﾀ, 1ｾｸﾀ256byte, ｲﾒｰｼﾞｻｲｽﾞ 143360 byte)
// 対応するFDｲﾒｰｼﾞ6 : ﾌﾟﾚｰﾝｲﾒｰｼﾞ[1D](40ﾄﾗｯｸ, 1ﾄﾗｯｸ16ｾｸﾀ, 1ｾｸﾀ256byte, ｲﾒｰｼﾞｻｲｽﾞ 163840 byte)
// 対応するFDｲﾒｰｼﾞ7 : ﾌﾟﾚｰﾝｲﾒｰｼﾞ[2D](80ﾄﾗｯｸ, 1ﾄﾗｯｸ16ｾｸﾀ, 1ｾｸﾀ256byte, ｲﾒｰｼﾞｻｲｽﾞ 327680 byte)
// -----------------------------------------------------------------------------------------
// SDｶｰﾄﾞに入れたFDｲﾒｰｼﾞでPC-6031、PC-8031(PC-80S31)の代わりとして使えます。
// ﾚﾄﾛPCからは、FDDが4ﾄﾞﾗｲﾌﾞ接続されているように見えます。
// PC-6001mkII、PC-8001mkIIは本体の「FDDｲﾝﾀｰﾌｪｰｽ」に接続すれば使えます。
// PC-6001mkIIは、内臓ROMで使えます。
// PC-6001(初代)には「拡張ﾕﾆｯﾄ」(PC-6011)と「N60-拡張BASIC」(PCS-6001R)が必要です。
// PC-8001(初代)には「FDDｲﾝﾀｰﾌｪｰｽ」(PC-8033)か同等品が必要です。
// PC-8001ｼﾘｰｽは、別途「Disk Basic」「S-DOS」「Dash-80」等のOSのFDｲﾒｰｼﾞが必要です。
// PC-8031(PC-80S31)で可能な、FDDのCPUにFD制御以外のﾌﾟﾛｸﾞﾗﾑを実行させる機能は入っていません。
// SD,SDHCのSDｶｰﾄﾞ( 32GB 以下 )が使えます。開発には1GB,2GB,4GBを使いました。
// UNO用3.5ｲﾝﾁ･ﾀｯﾁｽｸﾘｰﾝ(ILI9486)ｼｰﾙﾄﾞか、USB接続Serialで操作します。
// 接続ｹｰﾌﾞﾙは自作して下さい。(後に作成例を書いています。)
// ﾌﾞｻﾞｰﾓｼﾞｭｰﾙを付ければ、それっぽい音が出ます。
// 
// -----------------------------------------------------------------------------------------
// 接続ｹｰﾌﾞﾙ作成例(私のやり方)
// -----------------------------------------------------------------------------------------
// 後にﾚﾄﾛPC側FDｺﾈｸﾀｰとMEGAのﾋﾟﾝｱｻｲﾝを書いていますので参考にして下さい。
// ﾚﾄﾛPC、ｱﾝﾌｪﾉｰﾙｺﾈｸﾀｰ、ﾌﾗｯﾄｹｰﾌﾞﾙ、ﾋﾟﾝｺﾈｸﾀｰ、MEGAへとつなぐのがきれいなのですが、ﾋﾟﾝｺﾈｸﾀｰ圧着ﾍﾟﾝﾁが必要です。
// 私のやり方は、ﾚﾄﾛPC、ｱﾝﾌｪﾉｰﾙｺﾈｸﾀｰ、ﾌﾗｯﾄｹｰﾌﾞﾙ、ﾌﾗｯﾄｹｰﾌﾞﾙ用ｺﾈｸﾀｰ、ｼﾞｬﾝﾊﾟｰﾜｲﾔｰ、MEGAへとつないで行きます。
// 
// ｱﾝﾌｪﾉｰﾙｺﾈｸﾀｰ(36ﾋﾟﾝ,ﾌﾗｯﾄｹｰﾌﾞﾙ用,ｵｽ)は印の付いた1番ﾋﾟﾝをﾌﾗｯﾄｹｰﾌﾞﾙ(34芯)の1番(赤線)に合わせます。
// ｱﾝﾌｪﾉｰﾙやﾌﾗｯﾄｹｰﾌﾞﾙ用ｺﾈｸﾀｰの圧着は、専用工具が無ければ、傷がつかないように厚紙にくるんで万力で締めてもいいです。
// ｺﾈｸﾀｰを板や角材のきれっぱしではさみ、ｺﾈｸﾀｰが傾かないよう気にしながら木槌やｺﾞﾑﾊﾝﾏｰでたたいてもいいです。
// ｺﾈｸﾀｰは斜めに力が加わるとすぐ壊れます。何個か予備を持って作業すると安心です。
// DOS/Vや98のFDｹｰﾌﾞﾙが残っていたら、ｹｰﾌﾞﾙをねじっている部分はｶｯﾄして使えます。 
// 
// ﾌﾗｯﾄｹｰﾌﾞﾙ用ｺﾈｸﾀｰ(34ﾋﾟﾝ)とMEGAの接続は30cmのｼﾞｬﾝﾊﾟｰﾜｲﾔｰ(ｵｽ/ｵｽ)(先の断面が四角)がおすすめです。
// ﾏｲｸﾛSDｶｰﾄﾞﾘｰﾀﾞｰとMEGAの接続も30cmのｼﾞｬﾝﾊﾟｰﾜｲﾔｰ(ｵｽ/ﾒｽ)がおすすめです。短いとﾏｲｸﾛSDの入替がしずらいです。
// ﾏｲｸﾛSDｶｰﾄﾞﾘｰﾀﾞｰは配線を間違えると1発で壊れます。開発で2個壊しました。何個か予備があるといいです。
// 
// PC-8001mkIIのGNDは9本全部、MEGAにつないで下さい。PC-8001mkIIはGND接続が歯抜けでは動かなかったです。
// 逆に、PC-6001mkIIは[ﾋﾟﾝ09]をMEGAのGNDにつなぐと動かなかったです。PC-6001mkIIはGND8本、MEGAにつなぎます。
// GND用は2:11になるようにｼﾞｬﾝﾊﾟｰﾜｲﾔｰを加工し作って下さい。PC-6001系とそれ以外で兼用にする場合、
// PC-6001系の[ﾋﾟﾝ09]につなぐｼﾞｬﾝﾊﾟｰﾜｲﾔｰは途中でｽｲｯﾁやｵｽ･ﾒｽﾋﾟﾝで切断できるようにするといいです。
// 
// ｼﾞｬﾝﾊﾟｰﾜｲﾔｰは40本で1枚になっているものが作業しやすいです。白は電源、黒はGND、茶～灰は信号線にします。
// ﾎﾟｰﾄ番号0～7を茶～灰に合わせると間違えにくくなります。(0:茶,1:赤,2:ｵﾚﾝｼﾞ,3:黄,4:緑,5:青,6:紫,7:灰)
// PA0,PB0,PC0を茶で揃えます。後のﾎﾟｰﾄ番号も同様にします。
// 茶～黄の4本、緑～灰の4本ずつまとめて配線作業した方が分かりやすくて、配線のごちゃごちゃが多少緩和されます。
// 
// MEGA側GND2本(ｵｽ)[10cm] : ﾚﾄﾛPC側FDｺﾈｸﾀｰのGND9本(ｵｽ)[20cm],ﾏｲｸﾛSDｶｰﾄﾞﾘｰﾀﾞｰとﾌﾞｻﾞｰﾓｼﾞｭｰﾙ2本(ﾒｽ)[20cm]
// 動作確認が取れたら、MEGA,ﾌﾗｯﾄｹｰﾌﾞﾙ用ｺﾈｸﾀｰ,ﾏｲｸﾛSDｶｰﾄﾞﾘｰﾀﾞｰのｼﾞｬﾝﾊﾟｰﾜｲﾔｰがばらけないように固定します。
// 両面ﾃｰﾌﾟ、ﾊｻﾐで切れる薄いﾌﾟﾗｽﾁｯｸ片、ﾋﾞﾆｰﾙﾃｰﾌﾟ等で固定します。
// ﾌﾟﾗｽﾁｯｸ片はよく商品のﾊﾟｯｹｰｼﾞに使っいる透明な箱などから取ります。(私はﾀﾞｲｿｰのﾛｳｿｸの箱をよく拭いて使いました)
// ｼﾞｬﾝﾊﾟｰﾜｲﾔｰ先の黒い部分の幅に切ったﾌﾟﾗｽﾁｯｸ片を両面ﾃｰﾌﾟで貼り付けます。
// ﾌﾟﾗｽﾁｯｸ片でｻﾝﾄﾞｲｯﾁが出来たらﾋﾞﾆｰﾙﾃｰﾌﾟを2回ぐらい巻きます。これでﾏｲｸﾛSDｶｰﾄﾞﾘｰﾀﾞｰ付き接続ｹｰﾌﾞﾙが出来ました。
// 後、ﾌﾗｯﾄｹｰﾌﾞﾙは50㎝未満にして下さい。長いとﾉｲｽﾞを拾ってｴﾗｰが出やすくなります。
// 
// -----------------------------------------------------------------------------------------
// 材料の手配(特にUNO用3.5ｲﾝﾁ･ﾀｯﾁｽｸﾘｰﾝｼｰﾙﾄﾞ)( 2021.03.21 )
// -----------------------------------------------------------------------------------------
// 私はｱﾝﾌｪﾉｰﾙｺﾈｸﾀｰ、ﾌﾗｯﾄｹｰﾌﾞﾙ、ﾌﾗｯﾄｹｰﾌﾞﾙ用ｺﾈｸﾀｰを"ﾓﾉﾀﾛｳ"で買いました。(ﾚﾄﾛPCの修理とgotek改造用として)
// MEGAのｺﾋﾟｰ品、ｼﾞｬﾝﾊﾟｰﾜｲﾔｰ、ﾏｲｸﾛSDｶｰﾄﾞﾘｰﾀﾞｰ、ﾌﾞｻﾞｰﾓｼﾞｭｰﾙ、ﾀｯﾁｽｸﾘｰﾝｼｰﾙﾄﾞは"AliExpress"で買いました。
// "AliExpress"は評価が高いところから買えば、日数は掛かりますが安いです。(一部売逃げ業者あり)
// 
// ﾀｯﾁｽｸﾘｰﾝｼｰﾙﾄﾞを"AliExpress"で何個か買ったのですが、1個目は間違ってﾀｯﾁじゃない物を買ってしまいました。
// ﾀｯﾁｽｸﾘｰﾝｼｰﾙﾄﾞはﾀｯﾁじゃない物と紛らわしいです。画像にﾀｯﾁﾍﾟﾝが入っているかが目安です。
// 
// ﾀｯﾁｽｸﾘｰﾝｼｰﾙﾄﾞは基板がはみ出して接続ｹｰﾌﾞﾙの接続がしずらい物があります。
// ｼｰﾙﾄﾞに使う足長ﾋﾟﾝｿｹｯﾄの足10本の分を2個、足8本の分を2個を接続ｹｰﾌﾞﾙの先に付け、ﾀｯﾁｽｸﾘｰﾝにあたらないように
// MEGAに差した後、外側に曲げました。
// 
// Amazonの「3.5インチ320X480 Ultra HD ディスプレイモジュール」がおすすめです。ただ基板ははみ出してます。
// Amazonで少し安いKumanの3.5インチや"AliExpress"で買った1000円弱の3.5インチでは、
// 45度の角度で画面を見ると色が反転するのに、これは正面の色が残っています。
// 
// -----------------------------------------------------------------------------------------
// ﾚﾄﾛPC側FDｺﾈｸﾀｰのﾋﾟﾝｱｻｲﾝ(ﾋﾟﾝ番号の振り方がPC-8001系と異なる)([注1]以外PC-8001系と同じ)
// PC-6011、PC-6001mkII等
// -----------------------------------------------------------------------------------------
// *** 上側(ｱﾝﾌｪﾉｰﾙｺﾈｸﾀｰの幅の広い方) ***
// ﾋﾟﾝ01(Master8255_PB0)
// ﾋﾟﾝ02(Master8255_PB1)
// ﾋﾟﾝ03(Master8255_PB2)
// ﾋﾟﾝ04(Master8255_PB3)
// ﾋﾟﾝ05(Master8255_PB4)
// ﾋﾟﾝ06(Master8255_PB5)
// ﾋﾟﾝ07(Master8255_PB6)
// ﾋﾟﾝ08(Master8255_PB7)
// ﾋﾟﾝ09(Not Connected) -- ([注1] GNDに落とすと認識しなくなる(PC-6001mkIIで確認))
// ﾋﾟﾝ10(GND)
// ﾋﾟﾝ11(GND)
// ﾋﾟﾝ12(GND)
// ﾋﾟﾝ13(GND)
// ﾋﾟﾝ14(GND)
// ﾋﾟﾝ15(GND)
// ﾋﾟﾝ16(GND)
// ﾋﾟﾝ17(GND)
// ﾋﾟﾝ18(GND) -- 接続しない
// *** 下側(ｱﾝﾌｪﾉｰﾙｺﾈｸﾀｰの幅の狭い方) ***
// ﾋﾟﾝ19(Master8255_PA0)
// ﾋﾟﾝ20(Master8255_PA1)
// ﾋﾟﾝ21(Master8255_PA2)
// ﾋﾟﾝ22(Master8255_PA3)
// ﾋﾟﾝ23(Master8255_PA4)
// ﾋﾟﾝ24(Master8255_PA5)
// ﾋﾟﾝ25(Master8255_PA6)
// ﾋﾟﾝ26(Master8255_PA7)
// ﾋﾟﾝ27(Master8255_PC4)
// ﾋﾟﾝ28(Master8255_PC5)
// ﾋﾟﾝ29(Master8255_PC6)
// ﾋﾟﾝ30(Master8255_PC7)
// ﾋﾟﾝ31(Master8255_PC0)
// ﾋﾟﾝ32(Master8255_PC1)
// ﾋﾟﾝ33(Master8255_PC2)
// ﾋﾟﾝ34(Master8255_PC3)
// ﾋﾟﾝ35(RESET) -- ｼﾞｬﾝﾊﾟｰﾜｲﾔｰの先だけ差しておく
// ﾋﾟﾝ36(GND) -- 接続しない
// 
// -----------------------------------------------------------------------------------------
// ﾚﾄﾛPC側FDｺﾈｸﾀｰのﾋﾟﾝｱｻｲﾝ(ﾋﾟﾝ番号の振り方がPC-6001系と異なる)([注2]以外PC-6001系と同じ)
// PC-8033、PC-8001mkII、PC-8801(初代)、PC-9801(初代～M2)等
// -----------------------------------------------------------------------------------------
// *** 上側(ｱﾝﾌｪﾉｰﾙｺﾈｸﾀｰの幅の広い方) ***
// ﾋﾟﾝ01(Master8255_PB0)
// ﾋﾟﾝ03(Master8255_PB1)
// ﾋﾟﾝ05(Master8255_PB2)
// ﾋﾟﾝ07(Master8255_PB3)
// ﾋﾟﾝ09(Master8255_PB4)
// ﾋﾟﾝ11(Master8255_PB5)
// ﾋﾟﾝ13(Master8255_PB6)
// ﾋﾟﾝ15(Master8255_PB7)
// ﾋﾟﾝ17(GND) ---------- ([注2] GNDに落とさないと認識しない(PC-8001mkIIで確認))
// ﾋﾟﾝ19(GND)
// ﾋﾟﾝ21(GND)
// ﾋﾟﾝ23(GND)
// ﾋﾟﾝ25(GND)
// ﾋﾟﾝ27(GND)
// ﾋﾟﾝ29(GND)
// ﾋﾟﾝ31(GND)
// ﾋﾟﾝ33(GND)
// ﾋﾟﾝ35(Not Connected) -- 接続しない
// *** 下側(ｱﾝﾌｪﾉｰﾙｺﾈｸﾀｰの幅の狭い方) ***
// ﾋﾟﾝ02(Master8255_PA0)
// ﾋﾟﾝ04(Master8255_PA1)
// ﾋﾟﾝ06(Master8255_PA2)
// ﾋﾟﾝ08(Master8255_PA3)
// ﾋﾟﾝ10(Master8255_PA4)
// ﾋﾟﾝ12(Master8255_PA5)
// ﾋﾟﾝ14(Master8255_PA6)
// ﾋﾟﾝ16(Master8255_PA7)
// ﾋﾟﾝ18(Master8255_PC4)
// ﾋﾟﾝ20(Master8255_PC5)
// ﾋﾟﾝ22(Master8255_PC6)
// ﾋﾟﾝ24(Master8255_PC7)
// ﾋﾟﾝ26(Master8255_PC0)
// ﾋﾟﾝ28(Master8255_PC1)
// ﾋﾟﾝ30(Master8255_PC2)
// ﾋﾟﾝ32(Master8255_PC3)
// ﾋﾟﾝ34(RESET)-- ｼﾞｬﾝﾊﾟｰﾜｲﾔｰの先だけ差しておく
// ﾋﾟﾝ36(Not Connected) -- 接続しない
// 
// -----------------------------------------------------------------------------------------
// Arduino MEGAのﾋﾟﾝｱｻｲﾝ
// -----------------------------------------------------------------------------------------
// 
// D21(43)PD0
// D20(44)PD1
// AREF(98)
// GND
// D13(26)PB7/LED(SD I/O)
// D12(25)PB6
// D11(24)PB5
// D10(23)PB4
// D9(18)PH6
// D8(17)PH5
// D7(16)PH4
// D6(15)PH3
// D5(5)PE3
// D4(1)PG5
// D3(7)PE5
// D2(6)PE4
// D1(3)PE1/TX(WINDOWS-COMPORT)
// D0(2)PE0/RX(WINDOWS-COMPORT)
// D14(64)PJ1
// D15(63)PJ0
// D16(13)PH1
// D17(12)PH0
// D18(46)PD3
// D19(45)PD2
// D20(44)PD1
// D21(43)PD0

// *** 二列ｺﾈｸﾀｰ部(開始) ***
// 5V                       -> SD_VCC,buzzer module(VCC)
// 5V                       -> SD_VCC,buzzer module(VCC)
// D22(78)PA0/Slave8255_PA0 <- (Master8255_PB0)
// D23(77)PA1/Slave8255_PA1 <- (Master8255_PB1)
// D24(76)PA2/Slave8255_PA2 <- (Master8255_PB2)
// D25(75)PA3/Slave8255_PA3 <- (Master8255_PB3)
// D26(74)PA4/Slave8255_PA4 <- (Master8255_PB4)
// D27(73)PA5/Slave8255_PA5 <- (Master8255_PB5)
// D28(72)PA6/Slave8255_PA6 <- (Master8255_PB6)
// D29(71)PA7/Slave8255_PA7 <- (Master8255_PB7)
// D30(60)PC7/Slave8255_PB7 -> (Master8255_PA7)
// D31(59)PC6/Slave8255_PB6 -> (Master8255_PA6)
// D32(58)PC5/Slave8255_PB5 -> (Master8255_PA5)
// D33(57)PC4/Slave8255_PB4 -> (Master8255_PA4)
// D34(56)PC3/Slave8255_PB3 -> (Master8255_PA3)
// D35(55)PC2/Slave8255_PB2 -> (Master8255_PA2)
// D36(54)PC1/Slave8255_PB1 -> (Master8255_PA1)
// D37(53)PC0/Slave8255_PB0 -> (Master8255_PA0)
// D38(50)PD7               -> buzzer module(I/O)
// D39(70)PG2 -- ｼﾞｬﾝﾊﾟｰﾜｲﾔｰの先だけ差しておくと、ｺﾈｸﾀｰにする時にばらけない。
// D40(52)PG1 -- ｼﾞｬﾝﾊﾟｰﾜｲﾔｰの先だけ差しておくと、ｺﾈｸﾀｰにする時にばらけない。
// D41(51)PG0 -- ｼﾞｬﾝﾊﾟｰﾜｲﾔｰの先だけ差しておくと、ｺﾈｸﾀｰにする時にばらけない。
// D42(42)PL7/PC3/PC_ATN    -> (Master8255_PC7)
// D43(41)PL6/PC2/PC_DAC    -> (Master8255_PC6)
// D44(40)PL5/PC1/PC_RFD    -> (Master8255_PC5)
// D45(39)PL4/PC0/PC_DAV    -> (Master8255_PC4)
// D46(38)PL3/PC7/(FD_ATN)  <- (Master8255_PC3)
// D47(37)PL2/PC6/FD_DAC    <- (Master8255_PC2)
// D48(36)PL1/PC5/FD_RFD    <- (Master8255_PC1)
// D49(35)PL0/PC4/FD_DAV    <- (Master8255_PC0)
// D50(22)PB3               <- SD_MISO(Master Input Slave Output)
// D51(21)PB2               -> SD_MOSI(Master Output Slave Input)
// D52(20)PB1               -> SD_CLK(Clock)
// D53(19)PB0               -> SD_CS(Chip Select)
// GND -- ﾚﾄﾛPC側GND,SD_GND,buzzer module(GND)
// GND -- ﾚﾄﾛPC側GND,SD_GND,buzzer module(GND)
// *** 二列ｺﾈｸﾀｰ部(終了) ***

// A15(82)PK7
// A14(83)PK6
// A13(84)PK5
// A12(85)PK4
// A11(86)PK3
// A10(87)PK2
// A9(88)PK1
// A8(89)PK0
// A7(90)PF7
// A6(91)PF6
// A5(92)PF5
// A4(93)PF4
// A3(94)PF3
// A2(95)PF2
// A1(96)PF1
// A0(97)PF0
// VIN
// GND
// GND
// 5V
// 3V3
// RESET(30)
// IOREF
// Not Connected
// 
// =========================================================================================
// Arduino IDE 1.8.13 で開発しました。
// =========================================================================================
// 更新履歴 -----------------------------------------------------------------------------------------
// 2021/01/31 ﾕｰｻﾞｰｲﾝﾀｰﾌｪｰｽがｼﾘｱﾙ通信版完成
// 2021/02/11 ﾒﾓﾘ不足で不安定にならないように固定文字列はﾌﾗｯｼｭﾒﾓﾘに移行
// 2021/02/19 更新ﾃﾞｰﾀの持ち方やｲﾒｰｼﾞ出力の手順を見直し、当初処理が3～4分掛かっていたのが約30秒へ改善
// 2021/02/28 ﾕｰｻﾞｰｲﾝﾀｰﾌｪｰｽが3.5ｲﾝﾁ･ﾀｯﾁｽｸﾘｰﾝ(320X480)版完成
// 2021/03/08 SDに大量のI/Oがある時にｼｽﾃﾑが暴走するのを改善(WRITEの時、こまめにcloseする)
// 2021/03/12 WK1D0000.IMGをN60-拡張BASICのﾌｫｰﾏｯﾄ済にする
// 2021/03/15 WK2D0000.IMGをN-BASIC(DISK BASIC)のﾌｫｰﾏｯﾄ済にする
// 2021/03/21 3.5ｲﾝﾁ･ﾀｯﾁｽｸﾘｰﾝの画像は出るけど、ﾀｯﾁ出来ない分に対応(ﾀｯﾁ機能のﾋﾟﾝｱｻｲﾝが違う)
// 2021/04/01 頻繁に出ていたI/O ERROR の原因がSD読込み中のﾚｻﾞﾙﾄ・ｽﾃｰﾀｽにあることが判明し対応
// 
// 
// -----------------------------------------------------------------------------------------
// 開発中に一番悩んだこと(何度も試行錯誤したこと)
// SDｶｰﾄﾞの標準ﾗｲﾌﾞﾗﾘｰ<SD.h>には、ﾌｧｲﾙに対して読込み、追加記録はあっても一部更新が出来ません。( 2021.01.31 )
// -----------------------------------------------------------------------------------------
// ｹﾞｰﾑｿﾌﾄを動かすのは可能でも、ﾌﾟﾛｸﾞﾗﾑを作ったり、実機でCMTのﾌﾟﾛｸﾞﾗﾑをFDｲﾒｰｼﾞﾌｧｲﾙに保存することができません。
// どうするか？
// 単純に元のFDｲﾒｰｼﾞﾌｧｲﾙは使わずに、すべてｾｸﾀﾌｧｲﾙに分割する方法も試してみましたが、ｲﾏｲﾁなのでやめました。
// FDｲﾒｰｼﾞﾌｧｲﾙから1280個(80ﾄﾗｯｸ×16ｾｸﾀ)のｾｸﾀﾌｧｲﾙを作るのに4分弱掛かりました。
// 10個のFDｲﾒｰｼﾞﾌｧｲﾙを用意するのに40分はしんどい。
// FDｲﾒｰｼﾞﾌｧｲﾙから80個のﾄﾗｯｸﾌｧｲﾙに分割する方法は、作らず検討しただけですが、ﾊﾞｯﾌｧが4096byte必要になります。
// 8192byteしかない Arduino MEGA では、半分をﾊﾞｯﾌｧに使うと動作が不安定になりそうです。
// ﾊﾞｯﾌｧが256byteでﾄﾗｯｸﾌｧｲﾙだと、作ったり更新したりするのに、何度も読み書きを繰り返すのでこれもダメです。
// とりあえず思い付くﾍﾞﾀｰな案として、こうします。
// FDｲﾒｰｼﾞﾌｧｲﾙを更新したい時は、FDｲﾒｰｼﾞﾌｧｲﾙとは別に対象のｾｸﾀをｾｸﾀﾌｧｲﾙ(256byte)として残すようにします。
// 一部更新の時は、ｾｸﾀﾌｧｲﾙが無ければ作り、あれば削除して作ります。
// 読込みの時は、FDｲﾒｰｼﾞﾌｧｲﾙを読む前にｾｸﾀﾌｧｲﾙを探します。
// 更新されたFDｲﾒｰｼﾞﾌｧｲﾙが欲しい時は、元のFDｲﾒｰｼﾞﾌｧｲﾙとｾｸﾀﾌｧｲﾙで再構成(ｲﾒｰｼﾞ出力処理)をして作ります。
// ただ、ｲﾒｰｼﾞ出力処理も3～4分掛かるので、ﾍﾞｽﾄなやり方ではないです。ｾｸﾀﾌｧｲﾙが多いと遅くなります。
// ｲﾒｰｼﾞ出力処理の手順を見直したら多少速くなるかもしれません。
// すべてのFDｲﾒｰｼﾞﾌｧｲﾙに対して、使い始めに時間を掛け1280個のｾｸﾀﾌｧｲﾙを作るよりはましですが。
// RAMが多い Arduino Due ならFDｲﾒｰｼﾞﾌｧｲﾙとﾄﾗｯｸﾌｧｲﾙを使う方式で分単位の待ち時間は無くなるでしょう。
// ただ、Arduino Due は3.3Vだったり、ﾎﾟｰﾄがまとまってなかったり、FDDｴﾐｭﾚｰﾀとしての使い勝手はｲﾏｲﾁです。
// Arduino Due にFDDｲﾝﾀｰﾌｪｰｽとﾀｯﾁｽｸﾘｰﾝの付いたFDDｴﾐｭﾚｰﾀ専用ｼｰﾙﾄﾞを作れば、良くなるでしょうが。
// 専用接続ｹｰﾌﾞﾙだけでFDDｴﾐｭﾚｰﾀになる Arduino MEGA は捨てがたいです。
// Arduino MEGA で320KBのﾌｧｲﾙを高速にrewrite出来るSDﾗｲﾌﾞﾗﾘｰは作れないものでしょうか。
// 
// ( 2021.02.22 ｲﾒｰｼﾞ出力処理は1Dで約15秒、2Dで約30秒になりました。)
// 更新ﾃﾞｰﾀはｾｸﾀﾌｧｲﾙではなく、ﾄﾗｯｸﾌｧｲﾙにしました。ただ、ﾊﾞｯﾌｧの問題があるので、2段階の処理にしました。
// SDに一旦、ｾｸﾀﾌｧｲﾙを1ﾄﾗｯｸ分ためてﾄﾗｯｸﾌｧｲﾙを作るようにしました。ﾊﾞｯﾌｧは4ｾｸﾀ分の1024byteにしました。
// 
// 
// -----------------------------------------------------------------------------------------
// ﾚﾄﾛPCがFDDを認識する方法
// -----------------------------------------------------------------------------------------
// PC-6001mkIIはFDDｴﾐｭﾚｰﾀの出力ﾋﾟﾝのpinModeがOUTPUTなら[How Many Files?]が出る。
// 出力ﾋﾟﾝをﾊｲ･ｲﾝﾋﾟｰﾀﾞﾝｽ(INPUT)にして信号待ちしていると認識されない。PC-8001mkIIは認識する。
// 
// PC-8001mkIIはFDDのｺﾈｸﾀｰのGNDがすべて0VならIPLを読み込む通信を始める。
// 
// 
// -----------------------------------------------------------------------------------------
// ﾚｻﾞﾙﾄ・ｽﾃｰﾀｽ
// -----------------------------------------------------------------------------------------
// ﾘｰﾄﾞﾃﾞｨｽｸ・ｺﾏﾝﾄﾞ(02),ｺﾋﾟｰ・ｺﾏﾝﾄﾞ(04),ﾌｫｰﾏｯﾄ・ｺﾏﾝﾄﾞ(05)の処理開始時に
// .........................................................................................
//// Bit7 : I/O動作終了ﾌﾗｸﾞ
//// Bit6 : 1=ﾘｰﾄﾞﾊﾞｯﾌｧにﾃﾞｰﾀ有り、0=ﾘｰﾄﾞﾊﾞｯﾌｧにﾃﾞｰﾀ無し
//// Bit0 : 1=ｴﾗｰ有り、0=ｴﾗｰ無し
//Result_status = B00000000;                                  // ﾚｻﾞﾙﾄ・ｽﾃｰﾀｽ(送信ﾃﾞｰﾀ)
//Snd_data_Buffer = Result_status;
//PORTC = Snd_data_Buffer;                                    // ﾃﾞｰﾀ送信(PC7～PC0)
// .........................................................................................
// を追加したら、ﾚﾄﾛPC側のI/Oｴﾗｰやﾀｲﾑｱｳﾄが出なくなった。
// 
// 
